version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6
    steps:
      - run:
          name: echo
          command: echo

# version: 2
# jobs:

#   # 이 작업은 docker hub의 이미지와 현재 레포지토리 내의 base 이미지 버전을 비교해
#   # 업데이트가 필요한 경우 업데이트 해줍니다.
#   # master 브랜치에서만 동작합니다.
#   build-base-image:
#     docker:
#       - image: circleci/python:3.6
#     working_directory: ~/pingpong-api
#     steps:
#       - checkout

#       - run:
#           name: check branch is master
#           command: |
#             if [[ "$CIRCLE_BRANCH" != "master" ]] ; then
#               echo "Building base image must be executed on master branch"
#               circleci step halt
#             fi

#       # enable docker
#       - setup_remote_docker:
#           docker_layer_caching: true

#       - run:
#           name: compare base image version
#           command: |
#             token=`curl -s -H"Content-Type:application/json" -XPOST -d"{\"username\":\"scatterlab\",\"password\":\"$DOCKERHUB_PASSWORD\"}" "https://hub.docker.com/v2/users/login/" | jq -r ".token"`
#             tags=`curl -s -H"Authorization:JWT ${token}" "https://hub.docker.com/v2/repositories/scatterlab/pingpong-api/tags/?page_size=100" | jq -r ".results|.[]|.name"`
#             base_tag=`echo $tags | tr " " "\n" | grep "base-.*-cpu" | grep "[0-9]" | sed 's/base-\(.*\)-cpu/\1/g' | sort -V | tail -n 1`

#             repo_base_version=`cat ./pingpong-docker/base/version.txt`

#             echo "version of dockerhub ... $base_tag"
#             echo "version of repository ... $repo_base_version"

#             if [[ "$base_tag" = "$repo_base_version" ]] ; then
#               # skip rest of this job
#               circleci step halt
#             fi

#       - run:
#           name: build base image (cpu, gpu)
#           command: |
#             # build cpu and gpu
#             docker build \
#               --build-arg DEVICE_TYPE=cpu --build-arg IMAGE_NAME=ubuntu:16.04 \
#               -t scatterlab/pingpong-api:base-latest-cpu \
#               -t scatterlab/pingpong-api:base-`cat ./pingpong-docker/base/version.txt`-cpu \
#               -f pingpong-docker/base/Dockerfile \
#               pingpong-docker/base/.

#             docker build \
#               --build-arg DEVICE_TYPE=gpu --build-arg IMAGE_NAME=nvidia/cuda:9.0-cudnn7-runtime \
#               -t scatterlab/pingpong-api:base-latest-gpu \
#               -t scatterlab/pingpong-api:base-`cat ./pingpong-docker/base/version.txt`-gpu \
#               -f pingpong-docker/base/Dockerfile \
#               pingpong-docker/base/.

#       - run:
#           name: push base image
#           command: |
#             echo $DOCKERHUB_PASSWORD | docker login -u scatterlab --password-stdin
#             # push image
#             # always push as latest
#             for image_tag in "latest" "`cat ./pingpong-docker/base/version.txt`" ; do
#               docker push scatterlab/pingpong-api:base-${image_tag}-cpu
#               docker push scatterlab/pingpong-api:base-${image_tag}-gpu
#             done

#   check-code-style:
#     docker:
#       - image: circleci/python:3.6
#     working_directory: ~/pingpong-api
#     steps:
#       - checkout

#       - run:
#           name: install flake8 pep8-naming
#           command: |
#             pip install --user flake8 pep8-naming

#       - run:
#           name: check code style
#           command: |
#             services=`ls | grep model`
#             export PATH=$PATH:/home/circleci/.local/bin

#             for service in $services ; do
#               echo "=== module $service ===" >> ./report.txt
#               flake8 --exit-zero --statistics $service >> ./report.txt
#               echo "" >> ./report.txt
#             done

#       - store_artifacts:
#           path: ./report.txt
#           destination: /report.txt

#       - run:
#           name: send slack noti
#           command: |
#             export PATH=$PATH:/home/circleci/.local/bin
#             cat <<EOF >>body.json
#               {
#                 "text": "어머니, 핑퐁은 멘탈이 약한 아이입니다. 이번 푸쉬에서 `flake8 --count -qq --exit-zero`개나 틀렸단말입니다!",
#                 "attachments": [
#                   {
#                     "color": "#2c2d30",
#                     "title": "스앵님의 조언",
#                     "title_link": "https://${CIRCLE_BUILD_NUM}-129232415-gh.circle-artifacts.com/0/report.txt",
#                     "text": "${CIRCLE_USERNAME}야, ${CIRCLE_BRANCH} 시험에서는 1등 해야지?"
#                   },
#                   {
#                     "color": "#2c2d30",
#                     "title": "시험지 바로가기! (GitHub)",
#                     "title_link": "https://github.com/scatterlab/pingpong-api/commit/${CIRCLE_SHA1}"
#                   }
#                 ]
#               }
#             EOF
#             # curl -XPOST -H "Content-type:application/json" -d @body.json "${WEBHOOK_URL}"

#   test_id_ood:
#     docker:
#       - image: circleci/python:3.6
#     working_directory: ~/pingpong-api
#     steps:
#       - checkout
#       - run:
#           name: not configured
#           command: |
#             # not configured yet
#             circleci step halt

#   test_rmm:
#     docker:
#       - image: circleci/python:3.6

#     steps:
#       - checkout

#       - run:
#           name: not configured
#           command: |
#             # not configured yet
#             circleci step halt

#   test_csm:
#     docker:
#       - image: circleci/python:3.6

#     steps:
#       - checkout

#       - run:
#           name: not configured
#           command: |
#             # not configured yet
#             circleci step halt

#   test_reaction:
#     docker:
#       - image: circleci/python:3.6

#     steps:
#       - checkout

#       - run:
#           name: not configured
#           command: |
#             # not configured yet
#             circleci step halt

#   test_emotion:
#     docker:
#       - image: circleci/python:3.6

#     steps:
#       - checkout

#       - run:
#           name: not configured
#           command: |
#             # not configured yet
#             circleci step halt

#   build-light-docker-images:
#     docker:
#       - image: circleci/python:3.6
#     steps:
#       - checkout

#       # enable docker
#       - setup_remote_docker:
#           docker_layer_caching: true

#       - run:
#           name: login to docker hub
#           command: |
#             echo $DOCKERHUB_PASSWORD | docker login -u scatterlab --password-stdin

#       - run:
#           name: build light docker image
#           command: |
#             ./build.sh light

#       - run:
#           name: push light docker image
#           command: |
#             ./push.sh light

#   build-full-docker-images:
#     docker:
#       - image: circleci/python:3.6
#     steps:
#       - checkout

#       # enable docker
#       - setup_remote_docker:
#           docker_layer_caching: true

#       - run:
#           name: not configured
#           command: circleci step halt

# workflows:
#   version: 2
#   pingpong-api-ci:
#     jobs:
#       - build-base-image
#       - check-code-style

#       - test_id_ood:
#           requires:
#             - check-code-style
#             - build-base-image

#       - test_rmm:
#           requires:
#             - check-code-style
#             - build-base-image

#       - test_csm:
#           requires:
#             - check-code-style
#             - build-base-image

#       - test_reaction:
#           requires:
#             - check-code-style
#             - build-base-image

#       - test_emotion:
#           requires:
#             - check-code-style
#             - build-base-image

#       - build-light-docker-images:
#           requires:
#             - test_id_ood
#             - test_rmm
#             - test_csm
#             - test_reaction
#             - test_emotion
#           filters:
#             branches:
#               only:
#                 - develop

#       - build-full-docker-images:
#           requires:
#             - test_id_ood
#             - test_rmm
#             - test_csm
#             - test_reaction
#             - test_emotion
#           filters:
#             branches:
#               only:
#                 - master
